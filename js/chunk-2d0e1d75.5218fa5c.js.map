{"version":3,"sources":["webpack:///./src/utils/Adaptors/routeExport.js"],"names":["parser","xml","fileName","this","wptsArray","markers","wptsRoot","routeExport","waypoints","indexMap","map","wpt","parseInt","index","links","list","idx","indexOf","length","push","c","x","join","y","z","existingOuts","existingIns","defaultFolder","folders","marker","folder","$","i","n","name","g","groups","xml2js","require","builder","Builder","headless","buildObject","response","error","outs","ins","root","split","out","m","forEach"],"mappings":"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","file":"js/chunk-2d0e1d75.5218fa5c.js","sourcesContent":["export default class parser {\n  xml;\n  fileName;\n  mapname;\n  constructor(xml, fileName) {\n    this.xml = xml;\n    this.fileName = fileName;\n  }\n\n  getContentForSave(wptsArray, markers) {\n    let wptsRoot = this.xml.routeExport.waypoints[0];\n\n    let indexMap = wptsArray.map((wpt) => parseInt(wpt.index));\n\n    wptsRoot[\"$\"].c = wptsArray.length;\n\n    wptsRoot[\"x\"] = wptsArray.map((wpt) => wpt.x).join(\";\");\n    wptsRoot[\"y\"] = wptsArray.map((wpt) => wpt.y).join(\";\");\n    wptsRoot[\"z\"] = wptsArray.map((wpt) => wpt.z).join(\";\");\n\n    function links(list) {\n      list = list.map((idx) => indexMap.indexOf(idx) + 1);\n      if (!list.length) {\n        list.push(-1);\n      }\n      return list;\n    }\n\n    wptsRoot[\"out\"] = wptsArray\n      .map((wpt) => links(wpt.existingOuts()).join(\",\"))\n      .join(\";\");\n    wptsRoot[\"in\"] = wptsArray\n      .map((wpt) => links(wpt.existingIns()).join(\",\"))\n      .join(\";\");\n\n    let defaultFolder = \"All\";\n\n    let folders = [defaultFolder];\n\n    if (!markers || !markers.length) {\n      if (this.xml.routeExport.markers) {\n        delete this.xml.routeExport.markers;\n      }\n    } else {\n      if (!this.xml.routeExport.markers) {\n        this.xml.routeExport.markers = [];\n      }\n      this.xml.routeExport.markers[0][\"m\"] = markers.map((marker) => {\n        let folder = marker.folder ? marker.folder : defaultFolder;\n        if (folders.indexOf(folder) === -1) {\n          folders.push(folder);\n        }\n        return {\n          $: {\n            i: indexMap.indexOf(parseInt(marker.wpt.index)) + 1,\n            n: marker.name,\n            g: folder,\n          },\n        };\n      });\n    }\n\n    this.xml.routeExport.groups[0][\"g\"] = folders.map((folder) => {\n      return {\n        $: {\n          n: folder,\n        },\n      };\n    });\n\n    let xml2js = require(\"xml2js\");\n\n    let builder = new xml2js.Builder({\n      headless: true,\n    });\n\n    return builder.buildObject(this.xml);\n  }\n\n  parse() {\n    let response = {\n      error: null,\n      x: null,\n      y: null,\n      z: null,\n      outs: null,\n      ins: null,\n      markers: null,\n    };\n\n    let root = this.xml.routeExport;\n\n    if (!root.waypoints || root.waypoints.length !== 1) {\n      response.error = \"Cannot find waypoints\";\n      return response;\n    }\n\n    response.x = root.waypoints[0].x[0].split(\";\");\n    response.y = root.waypoints[0].y[0].split(\";\");\n    response.z = root.waypoints[0].z[0].split(\";\");\n\n    response.outs = root.waypoints[0].out[0].split(\";\");\n    response.ins = root.waypoints[0][\"in\"][0].split(\";\");\n\n    if (\n      response.x.length !== response.y.length ||\n      response.y.length !== response.z.length ||\n      response.z.length !== response.outs.length ||\n      response.outs.length !== response.ins.length\n    ) {\n      response.error =\n        \"x (\" +\n        response.x.length +\n        \"), \" +\n        \"y (\" +\n        response.y.length +\n        \"), \" +\n        \"z (\" +\n        response.z.length +\n        \"), \" +\n        \"out (\" +\n        response.outs.length +\n        \"), \" +\n        \"ins (\" +\n        response.ins.length +\n        \"), \" +\n        \"data length not coherent\";\n      return response;\n    }\n\n    response.markers = [];\n\n    if (root.markers) {\n      root.markers[0].m.forEach((marker) => {\n        response.markers.push({\n          index: parseInt(marker.$.i),\n          name: marker.$.n,\n          folder: marker.$.g,\n        });\n      });\n    }\n\n    return response;\n  }\n}\n"],"sourceRoot":""}