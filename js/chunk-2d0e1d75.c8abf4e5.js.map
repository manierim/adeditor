{"version":3,"sources":["webpack:///./src/utils/Adaptors/routeExport.js"],"names":["parser","xml","fileName","this","wptsArray","markers","links","list","map","idx","indexMap","indexOf","length","push","wptsRoot","routeExport","waypoints","wpt","parseInt","index","c","x","join","y","z","existingOuts","existingIns","defaultFolder","folders","marker","folder","$","i","n","name","g","groups","xml2js","require","builder","Builder","headless","content","buildObject","console","debug","response","error","outs","ins","root","split","out","m","forEach"],"mappings":"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","file":"js/chunk-2d0e1d75.c8abf4e5.js","sourcesContent":["export default class parser {\n  xml;\n  fileName;\n  mapname;\n  constructor(xml, fileName) {\n    this.xml = xml;\n    this.fileName = fileName;\n  }\n\n  async write(wptsArray, markers) {\n    let wptsRoot = this.xml.routeExport.waypoints[0];\n\n    let indexMap = wptsArray.map(wpt => parseInt(wpt.index));\n\n    wptsRoot[\"$\"].c = wptsArray.length;\n\n    wptsRoot[\"x\"] = wptsArray.map(wpt => wpt.x).join(\";\");\n    wptsRoot[\"y\"] = wptsArray.map(wpt => wpt.y).join(\";\");\n    wptsRoot[\"z\"] = wptsArray.map(wpt => wpt.z).join(\";\");\n\n    function links(list) {\n      list = list.map(idx => indexMap.indexOf(idx) + 1);\n      if (!list.length) {\n        list.push(-1);\n      }\n      return list;\n    }\n\n    wptsRoot[\"out\"] = wptsArray\n      .map(wpt => links(wpt.existingOuts()).join(\",\"))\n      .join(\";\");\n    wptsRoot[\"in\"] = wptsArray\n      .map(wpt => links(wpt.existingIns()).join(\",\"))\n      .join(\";\");\n\n    let defaultFolder = \"All\";\n\n    let folders = [defaultFolder];\n\n    this.xml.routeExport.markers[0][\"m\"] = markers.map(marker => {\n      let folder = marker.folder ? marker.folder : defaultFolder;\n      if (folders.indexOf(folder) === -1) {\n        folders.push(folder);\n      }\n      return {\n        $: {\n          i: indexMap.indexOf(parseInt(marker.wpt.index)) + 1,\n          n: marker.name,\n          g: folder\n        }\n      };\n    });\n\n    this.xml.routeExport.groups[0][\"g\"] = folders.map(folder => {\n      return {\n        $: {\n          n: folder\n        }\n      };\n    });\n\n    let xml2js = require(\"xml2js\");\n\n    let builder = new xml2js.Builder({\n      headless: true\n    });\n    let content = builder.buildObject(this.xml);\n\n    console.debug(content);\n  }\n\n  parse() {\n    let response = {\n      error: null,\n      x: null,\n      y: null,\n      z: null,\n      outs: null,\n      ins: null,\n      markers: null\n    };\n\n    let root = this.xml.routeExport;\n\n    if (!root.waypoints || root.waypoints.length !== 1) {\n      response.error = \"Cannot find waypoints\";\n      return response;\n    }\n\n    response.x = root.waypoints[0].x[0].split(\";\");\n    response.y = root.waypoints[0].y[0].split(\";\");\n    response.z = root.waypoints[0].z[0].split(\";\");\n\n    response.outs = root.waypoints[0].out[0].split(\";\");\n    response.ins = root.waypoints[0][\"in\"][0].split(\";\");\n\n    if (\n      response.x.length !== response.y.length ||\n      response.y.length !== response.z.length ||\n      response.z.length !== response.outs.length ||\n      response.outs.length !== response.ins.length\n    ) {\n      response.error =\n        \"x (\" +\n        response.x.length +\n        \"), \" +\n        \"y (\" +\n        response.y.length +\n        \"), \" +\n        \"z (\" +\n        response.z.length +\n        \"), \" +\n        \"out (\" +\n        response.outs.length +\n        \"), \" +\n        \"ins (\" +\n        response.ins.length +\n        \"), \" +\n        \"data length not coherent\";\n      return response;\n    }\n\n    response.markers = [];\n\n    if (root.markers) {\n      root.markers[0].m.forEach(marker => {\n        response.markers.push({\n          index: parseInt(marker.$.i),\n          name: marker.$.n,\n          folder: marker.$.g\n        });\n      });\n    }\n\n    return response;\n  }\n}\n"],"sourceRoot":""}